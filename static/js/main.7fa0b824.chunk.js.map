{"version":3,"sources":["assets/images/recycle-bin-line.svg","assets/images/document-edit.svg","actions/index.js","pages/Login.js","components/Header.js","components/TableHead.js","components/Table.js","components/Input.js","components/Select.js","helpers/optionsData.js","components/AddExpense.js","components/EditExpense.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store.js","index.js"],"names":["module","exports","fetchCurrency","dispatch","fetch","then","response","json","USDTdeleted","Object","keys","filter","currency","type","payload","Login","state","email","password","blockSubmit","redirect","validateInputs","bind","handleChange","handleClick","this","test","length","setState","target","name","value","auth","props","to","src","alt","placeholder","data-testid","onChange","onKeyUp","event","key","disabled","onClick","className","React","Component","connect","userLogin","Header","total","expenses","reduce","acc","exchangeRates","parseFloat","ask","roundedTotal","Math","round","toFixed","user","wallet","TableHead","Table","handleDelete","id","removeExpense","expense","showButtons","map","description","method","tag","exchangeRate","roundedRate","split","style","display","editIcon","width","height","deleteIcon","newExpenses","Input","text","dataTestId","min","htmlFor","defaultProps","Select","options","selected","option","methodOptions","tagOptions","AddExpense","getCurrencies","saveExpense","prevState","currencyOptions","currencies","loading","EditExpense","editing","find","edit","editExpense","Wallet","handleEdit","finishEdit","itemId","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","editedExpenses","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fa0b824.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/recycle-bin-line.eb81c70a.svg\";","module.exports = __webpack_public_path__ + \"static/media/document-edit.71d39318.svg\";","export const USER_LOGIN = 'USER_LOGIN';\nexport const UPDATE_CURRENCY = 'UPDATE_CURRENCY';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const userLogin = (email) => ({\n  type: USER_LOGIN,\n  payload: email,\n});\n\nexport const updateCurrency = (currency) => ({\n  type: UPDATE_CURRENCY,\n  payload: currency,\n});\n\nexport const deleteExpense = (newCurrencies) => ({\n  type: DELETE_EXPENSE,\n  payload: newCurrencies,\n});\n\nexport const updateExpense = (expense) => ({\n  type: ADD_EXPENSE,\n  payload: expense,\n});\n\nexport const editExpense = (expense) => ({\n  type: EDIT_EXPENSE,\n  payload: expense,\n});\n\nexport const fetchExpense = (state) => (dispatch) => (\n  fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((response) => response.json())\n    .then((response) => dispatch(updateExpense({ ...state, exchangeRates: response })))\n);\n\nexport const fetchCurrency = () => (dispatch) => (\n  fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((response) => response.json())\n    .then((response) => {\n      const allCurrencies = Object.keys(response);\n      const USDTdeleted = allCurrencies.filter((currency) => currency !== 'USDT');\n      dispatch(updateCurrency(USDTdeleted));\n    })\n);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { userLogin } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      blockSubmit: true,\n      redirect: false,\n    };\n\n    this.validateInputs = this.validateInputs.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  validateInputs() {\n    const { email, password } = this.state;\n    const validEmail = /\\S+@\\S+\\.\\S+/;\n    const validPassword = 6;\n    if (validEmail.test(email) && password.length >= validPassword) {\n      this.setState({ blockSubmit: false });\n    } else {\n      this.setState({ blockSubmit: true });\n    }\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value }, () => this.validateInputs());\n  }\n\n  handleClick() {\n    const { auth } = this.props;\n    const { email } = this.state;\n    auth(email);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { email, password, blockSubmit, redirect } = this.state;\n\n    if (redirect) {\n      return <Redirect to=\"/carteira\" />;\n    }\n\n    return (\n      <main>\n        <h1>TrybeWallet</h1>\n        <form>\n          <img src=\"https://media.giphy.com/media/67ThRZlYBvibtdF9JH/giphy.gif\" alt=\"gif pernalonga contando dinheiro\" />\n          <h3>Login</h3>\n          <input\n            name=\"email\"\n            type=\"text\"\n            placeholder=\"EMAIL\"\n            data-testid=\"email-input\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"SENHA\"\n            data-testid=\"password-input\"\n            value={ password }\n            onChange={ this.handleChange }\n            onKeyUp={ (event) => event.key === 'Enter' && this.handleClick() }\n          />\n          <button\n            type=\"button\"\n            disabled={ blockSubmit }\n            onClick={ this.handleClick }\n            className={ blockSubmit ? 'disabled-btn' : 'login-btn' }\n          >\n            Entrar\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  auth: (email) => dispatch(userLogin(email)),\n});\n\nLogin.propTypes = {\n  auth: propTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const total = expenses.reduce((acc, { value, currency, exchangeRates }) => {\n      const exchangeRate = parseFloat(exchangeRates[currency].ask);\n      acc += value * exchangeRate;\n      return acc;\n    }, 0);\n\n    const roundedTotal = (Math.round(total * 100) / 100).toFixed(2);\n\n    return (\n      <header>\n        <h1>TrybeWallet</h1>\n        <div>\n          <span data-testid=\"email-field\">\n            Email:\n            { email }\n          </span>\n          <span data-testid=\"total-field\">\n            Despesa total: R$\n            { roundedTotal }\n            <span data-testid=\"header-currency-field\">BRL</span>\n          </span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: propTypes.string.isRequired,\n  expenses: propTypes.arrayOf(propTypes.shape({\n    value: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,\n    currency: propTypes.string.isRequired,\n    exchangeRates: propTypes.shape({\n      USD: propTypes.shape({\n        ask: propTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  })).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\n\nclass TableHead extends React.Component {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHead;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport TableHead from './TableHead';\nimport { deleteExpense } from '../actions';\nimport deleteIcon from '../assets/images/recycle-bin-line.svg';\nimport editIcon from '../assets/images/document-edit.svg';\n\nclass Table extends React.Component {\n  constructor() {\n    super();\n\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  handleDelete(id) {\n    const { expenses, removeExpense } = this.props;\n    const newExpenses = expenses.filter((expense) => expense.id !== id);\n    removeExpense(newExpenses);\n  }\n\n  render() {\n    const { expenses, onClick, showButtons } = this.props;\n    return (\n      <table>\n        <TableHead />\n        <tbody>\n          { expenses.map(({\n            id, value, description, currency, method, tag, exchangeRates,\n          }) => {\n            const exchangeRate = parseFloat(exchangeRates[currency].ask);\n            const roundedRate = (Math.round((exchangeRate) * 100) / 100).toFixed(2);\n            const total = (Math.round((value * exchangeRate) * 100) / 100).toFixed(2);\n            return (\n              <tr key={ id }>\n                <td>{ description }</td>\n                <td>{ tag }</td>\n                <td>{ method }</td>\n                <td>{ value }</td>\n                <td>{ exchangeRates[currency].name.split('/')[0] }</td>\n                <td>{ roundedRate }</td>\n                <td>{ total}</td>\n                <td>Real</td>\n                <td\n                  className=\"table-buttons\"\n                  style={ { display: showButtons && 'none' } }\n                >\n                  <button\n                    type=\"button\"\n                    data-testid=\"edit-btn\"\n                    className=\"edit-btn\"\n                    onClick={ () => onClick(id) }\n                  >\n                    <img alt=\"delete\" src={ editIcon } width=\"16px\" height=\"16px\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    className=\"delete-btn\"\n                    onClick={ () => this.handleDelete(id) }\n                  >\n                    <img alt=\"delete\" src={ deleteIcon } width=\"16px\" height=\"16px\" />\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (newExpenses) => dispatch(deleteExpense(newExpenses)),\n});\n\nTable.propTypes = {\n  onClick: propTypes.func.isRequired,\n  expenses: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    value: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,\n    description: propTypes.string.isRequired,\n    currency: propTypes.string.isRequired,\n    method: propTypes.string.isRequired,\n    tag: propTypes.string.isRequired,\n    exchangeRates: propTypes.shape({\n      USD: propTypes.shape({\n        name: propTypes.string.isRequired,\n        ask: propTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  })).isRequired,\n  removeExpense: propTypes.func.isRequired,\n  showButtons: propTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass Input extends React.Component {\n  render() {\n    const { text, type, name, value, onChange, dataTestId, min } = this.props;\n\n    return (\n      <label htmlFor={ name }>\n        { text }\n        <input\n          data-testid={ dataTestId }\n          type={ type }\n          name={ name }\n          id={ name }\n          min={ min }\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  text: propTypes.string.isRequired,\n  type: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  dataTestId: propTypes.string.isRequired,\n  value: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,\n  onChange: propTypes.func.isRequired,\n  min: propTypes.string,\n};\n\nInput.defaultProps = {\n  min: '',\n};\n\nexport default Input;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass Select extends React.Component {\n  render() {\n    const { text, name, options, onChange, dataTestId, selected } = this.props;\n\n    return (\n      <label htmlFor={ name }>\n        { text }\n        <select\n          name={ name }\n          id={ name }\n          onChange={ onChange }\n          data-testid={ dataTestId }\n        >\n          {options.map((option) => (\n            <option\n              key={ option }\n              value={ option }\n              selected={ selected === option }\n            >\n              {option}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  text: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  dataTestId: propTypes.string.isRequired,\n  options: propTypes.arrayOf(propTypes.string).isRequired,\n  onChange: propTypes.func.isRequired,\n  selected: propTypes.string,\n};\n\nSelect.defaultProps = {\n  selected: '',\n};\n\nexport default Select;\n","export const methodOptions = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nexport const tagOptions = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { fetchExpense, fetchCurrency } from '../actions';\nimport Input from './Input';\nimport Select from './Select';\nimport { methodOptions, tagOptions } from '../helpers/optionsData';\n\nclass AddExpense extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { expenses } = this.props;\n    let id = 0;\n\n    if (expenses.length > 0) {\n      id = (expenses[expenses.length - 1].id) + 1;\n    }\n    this.state = {\n      id,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Comida',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { value, description } = this.state;\n    if (value && description) {\n      const { saveExpense } = this.props;\n      const teste = { ...this.state };\n      saveExpense(teste);\n      this.setState((prevState) => ({\n        id: prevState.id + 1,\n        value: 0,\n        description: '',\n      }));\n    }\n  }\n\n  render() {\n    const { value, description } = this.state;\n    const { currencyOptions } = this.props;\n    return (\n      <section className=\"add-expense\">\n        <Input\n          text=\"Valor: \"\n          type=\"number\"\n          name=\"value\"\n          min=\"0\"\n          dataTestId=\"value-input\"\n          value={ value }\n          onChange={ this.handleChange }\n        />\n        <Input\n          text=\"Descrição: \"\n          type=\"text\"\n          name=\"description\"\n          dataTestId=\"description-input\"\n          value={ description }\n          onChange={ this.handleChange }\n        />\n        <Select\n          text=\"Moeda: \"\n          name=\"currency\"\n          dataTestId=\"currency-input\"\n          onChange={ this.handleChange }\n          options={ currencyOptions }\n        />\n        <Select\n          text=\"Método de pagamento: \"\n          name=\"method\"\n          dataTestId=\"method-input\"\n          onChange={ this.handleChange }\n          options={ methodOptions }\n        />\n        <Select\n          text=\"Tag: \"\n          name=\"tag\"\n          dataTestId=\"tag-input\"\n          onChange={ this.handleChange }\n          options={ tagOptions }\n        />\n        <button type=\"button\" onClick={ this.handleClick }>Adicionar despesa</button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expense) => dispatch(fetchExpense(expense)),\n  getCurrencies: () => dispatch(fetchCurrency()),\n});\n\nconst mapStateToProps = (state) => ({\n  currencyOptions: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  loading: state.wallet.loading,\n});\n\nAddExpense.propTypes = {\n  saveExpense: propTypes.func.isRequired,\n  getCurrencies: propTypes.func.isRequired,\n  currencyOptions: propTypes.arrayOf(propTypes.string).isRequired,\n  expenses: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number,\n  })).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExpense);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { editExpense, fetchCurrency } from '../actions';\nimport Input from './Input';\nimport Select from './Select';\nimport { methodOptions, tagOptions } from '../helpers/optionsData';\n\nclass EditExpense extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { id, expenses } = this.props;\n    const editing = expenses.find((expense) => expense.id === id);\n    const { value, description, currency, method, tag } = editing;\n\n    this.state = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { edit, onClick } = this.props;\n    const editedExpense = { ...this.state };\n    edit(editedExpense);\n    onClick();\n  }\n\n  render() {\n    const { value, description, method, currency, tag } = this.state;\n    const { currencyOptions } = this.props;\n    return (\n      <section className=\"edit-expense\">\n        <Input\n          text=\"Valor: \"\n          type=\"number\"\n          name=\"value\"\n          min=\"0\"\n          dataTestId=\"value-input\"\n          value={ value }\n          onChange={ this.handleChange }\n        />\n        <Input\n          text=\"Descrição: \"\n          type=\"text\"\n          name=\"description\"\n          dataTestId=\"description-input\"\n          value={ description }\n          onChange={ this.handleChange }\n        />\n        <Select\n          text=\"Moeda: \"\n          name=\"currency\"\n          dataTestId=\"currency-input\"\n          selected={ currency }\n          onChange={ this.handleChange }\n          options={ currencyOptions }\n        />\n        <Select\n          text=\"Método de pagamento: \"\n          name=\"method\"\n          dataTestId=\"method-input\"\n          selected={ method }\n          onChange={ this.handleChange }\n          options={ methodOptions }\n        />\n        <Select\n          text=\"Tag: \"\n          name=\"tag\"\n          dataTestId=\"tag-input\"\n          selected={ tag }\n          onChange={ this.handleChange }\n          options={ tagOptions }\n        />\n        <button type=\"button\" onClick={ this.handleClick }>Editar despesa</button>\n      </section>\n    );\n  }\n}\n\nconst mapDisptachToProps = (dispatch) => ({\n  edit: (expense) => dispatch(editExpense(expense)),\n  getCurrencies: () => dispatch(fetchCurrency()),\n});\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencyOptions: state.wallet.currencies,\n  loading: state.wallet.loading,\n});\n\nEditExpense.propTypes = {\n  id: propTypes.number.isRequired,\n  edit: propTypes.func.isRequired,\n  onClick: propTypes.func.isRequired,\n  expenses: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    value: propTypes.oneOfType([propTypes.number, propTypes.string]).isRequired,\n    description: propTypes.string.isRequired,\n    currency: propTypes.string.isRequired,\n    method: propTypes.string.isRequired,\n    tag: propTypes.string.isRequired,\n  })).isRequired,\n  getCurrencies: propTypes.func.isRequired,\n  currencyOptions: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDisptachToProps)(EditExpense);\n","import React from 'react';\nimport { Header, AddExpense, Table, EditExpense } from '../components';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      edit: false,\n      id: '',\n    };\n\n    this.handleEdit = this.handleEdit.bind(this);\n    this.finishEdit = this.finishEdit.bind(this);\n  }\n\n  handleEdit(itemId) {\n    this.setState({ edit: true, id: itemId });\n  }\n\n  finishEdit() {\n    this.setState({ edit: false, id: '' });\n  }\n\n  render() {\n    const { edit, id } = this.state;\n\n    return (\n      <>\n        <Header />\n        { !edit && <AddExpense />}\n        { edit && <EditExpense id={ id } onClick={ this.finishEdit } />}\n        <Table onClick={ this.handleEdit } showButtons={ edit } />\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case USER_LOGIN:\n    return { email: payload };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { UPDATE_CURRENCY, ADD_EXPENSE, DELETE_EXPENSE, EDIT_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case UPDATE_CURRENCY:\n    return { ...state, currencies: [...payload] };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, payload] };\n  case DELETE_EXPENSE:\n    return { ...state, expenses: [...payload] };\n  case EDIT_EXPENSE:\n  { const editedExpenses = state.expenses.map((expense) => {\n    if (expense.id === payload.id) {\n      const editedExpense = { ...expense, ...payload };\n      return editedExpense;\n    }\n    return expense;\n  });\n  return { ...state, expenses: [...editedExpenses] }; }\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename=\"project-trybewallet\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}